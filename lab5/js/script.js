class Block {
  constructor() {
    if (new.target === Block) {
      throw new Error("Block is an abstract class and cannot be instantiated directly.");
    }
  }

  render() {
    throw new Error("Method 'render' must be implemented.");
  }
}

class HeaderBlock extends Block {
  constructor(name, title, photoUrl) {
    super();
    this.name = name;
    this.title = title;
    this.photoUrl = photoUrl;
  }

  render() {
    return `
      <div class="block header-block">
        <h1>${this.name}</h1>
        <p>${this.title}</p>
        ${this.photoUrl ? `<img src="${this.photoUrl}" alt="–§–æ—Ç–æ" class="header-photo">` : ''}
        <button id="toggle-edit-mode">–í–∫–ª—é—á–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</button>
      </div>
    `;
  }
}

class PhotoBlock extends Block {
  constructor(photoUrl, contacts) {
    super();
    this.photoUrl = photoUrl;
    this.contacts = contacts;
  }

  render() {
    return `
      <div class="photo-block">
        <img src="${this.photoUrl}" alt="–§–æ—Ç–æ">
        <div class="contacts">
          <h2>–ö–æ–Ω—Ç–∞–∫—Ç—ã</h2>
          ${this.contacts.map(contact => `<p>${contact}</p>`).join('')}
        </div>
      </div>
    `;
  }
}

class AboutBlock extends Block {
  constructor(aboutText) {
    super();
    this.aboutText = aboutText;
  }

  render() {
    return `
      <div class="block about-block">
        <h2>–û —Å–µ–±–µ</h2>
        ${this.aboutText.map(text => `<p>${text}</p>`).join('')}
      </div>
    `;
  }
}

class SkillsBlock extends Block {
  constructor(skills) {
    super();
    this.skills = skills;
  }

  render() {
    return `
      <div class="block skills-block">
        <h2>–ù–∞–≤—ã–∫–∏</h2>
        <ul>
          ${this.skills.map(skill => `<li>${skill}</li>`).join('')}
        </ul>
      </div>
    `;
  }
}

class AchievementsBlock extends Block {
  constructor(achievements) {
    super();
    this.achievements = achievements;
  }

  render() {
    return `
      <div class="block achievements-block">
        <h2>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h2>
        <ul>
          ${this.achievements.map(achievement => `<li>${achievement}</li>`).join('')}
        </ul>
      </div>
    `;
  }
}

class HobbiesBlock extends Block {
  constructor(hobbies) {
    super();
    this.hobbies = hobbies;
  }

  render() {
    return `
      <div class="block hobbies-block">
        <h2>–£–≤–ª–µ—á–µ–Ω–∏—è</h2>
        <ul>
          ${this.hobbies.map(hobby => `<li>${hobby}</li>`).join('')}
        </ul>
      </div>
    `;
  }
}

const saveBlocks = () => {
  localStorage.setItem('blocks', JSON.stringify(blocks));
};


const loadBlocks = () => {
  const savedBlocks = localStorage.getItem('blocks');
  if (savedBlocks) {
    blocks = JSON.parse(savedBlocks);
  }
};

let editMode = false; 

function buildSite() {
  const blocks = [
    new HeaderBlock(
      "–≠–ª–µ–æ–Ω–æ—Ä–∞ –ö–æ–ª—å—Ü–æ–≤–∞",
      "–ó–∞–≤–µ–¥—É—é—â–∏–π –∫–∞—Ñ–µ–¥—Ä–æ–π (–ö–∞—Ñ–µ–¥—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π)",
      "img/—ç–¥–Ω–∞.jpg"
    ),
    new PhotoBlock("img/Koltsova-E.M.jpg", [
      "üìå –ú–æ—Å–∫–≤–∞, —É–ª. –ì–µ—Ä–æ–µ–≤ –ü–∞–Ω—Ñ–∏–ª–æ–≤—Ü–µ–≤, 20",
      "üìû +7 (495) 495-21-26",
      "üìß koltsova.e.m@muctr.ru",
      "üåê https://www.muctr.ru",
      "üê¶ www.twitter.com/ye",
      "üë§ facebook.com/ye"
    ]),
    new AboutBlock([
      "–†–∞–Ω—å—à–µ —è —à–∏–ª–∞ –∫–æ—Å—Ç—é–º—ã –¥–ª—è —Å—É–ø–µ—Ä—Å–µ–º–µ–π–∫–∏, –∞ –ø–æ—Ç–æ–º –º–Ω–µ –ø—Ä–æ—Å—Ç—Ä–µ–ª–∏–ª–∏ –∫–æ–ª–µ–Ω–æ...",
      "–î–æ–∫—Ç–æ—Ä —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫, –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä"
    ]),
    new SkillsBlock(["–≤—è–∑–∞–Ω–∏–µ", "–∫—Ä–æ—Å—Å–≤–æ—Ä–¥—ã", "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–≥–æ—Ç–æ–≤–∫–∞", "–¥–µ–º–µ–Ω—Ü–∏—è"]),
    new AchievementsBlock([
      "–ü–æ—Å—Ç—Ä–æ–∏–ª–∞ –∑–∞–≤–æ–¥)",
      "–∫—Ä—ã—à–∫–∞ —Ä–µ–∞–∫—Ç–æ—Ä–∞ –≤–∑–æ—Ä–≤–∞–ª–∞—Å—å("
    ]),
    new HobbiesBlock(["–í—è–∑–∞–Ω–∏–µ", "–í—è–∑–∞–Ω–∏–µ", "–°–∏–º–ø—Ç–æ–º—ã –ê–ª—å—Ü–≥–µ–π–º–µ—Ä–∞", "–í—è–∑–∞–Ω–∏–µ", "–°–∏–º–ø—Ç–æ–º—ã –ê–ª—å—Ü–≥–µ–π–º–µ—Ä–∞"])
  ];

  const body = document.body;
  const container = document.createElement("div");
  container.className = "container";

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ –±–ª–æ–∫–æ–≤
  const renderBlocks = () => {
    container.innerHTML = ''; 
    blocks.forEach((block, index) => {
      const blockHtml = block.render();
      const blockElement = document.createElement('div');
      blockElement.innerHTML = blockHtml;

      if (editMode) {
        const editButton = document.createElement('button');
        editButton.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å';
        editButton.addEventListener('click', () => editBlock(index));
        blockElement.appendChild(editButton);

        const deleteButton = document.createElement('button');
        deleteButton.textContent = '–£–¥–∞–ª–∏—Ç—å';
        deleteButton.addEventListener('click', () => deleteBlock(index));
        blockElement.appendChild(deleteButton);
      }

      container.appendChild(blockElement);
    });

    // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
    if (editMode) {
      const addBlockButton = document.createElement('button');
      addBlockButton.textContent = '–î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫';
      addBlockButton.addEventListener('click', addNewBlock);
      container.appendChild(addBlockButton);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª–æ–∫–∞
  const editBlock = (index) => {
    const block = blocks[index];
    const newContent = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–ª–æ–∫–∞:', JSON.stringify(block));
    if (newContent) {
      Object.assign(block, JSON.parse(newContent));
      renderBlocks();
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–ª–æ–∫–∞
  const deleteBlock = (index) => {
    blocks.splice(index, 1);
    renderBlocks();
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
  const addNewBlock = () => {
    const newBlock = new AboutBlock(['–ù–æ–≤—ã–π –±–ª–æ–∫']);
    blocks.push(newBlock);
    renderBlocks();
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const toggleEditMode = () => {
    editMode = !editMode; 
    renderBlocks();

    const toggleButton = document.getElementById('toggle-edit-mode');
    if (toggleButton) {
      toggleButton.textContent = editMode ? '–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' : '–í–∫–ª—é—á–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ';
    }
  };

  renderBlocks();
  body.appendChild(container);

  document.addEventListener('click', (event) => {
    if (event.target.id === 'toggle-edit-mode') {
      toggleEditMode();
    }
  });
}

window.onload = buildSite;